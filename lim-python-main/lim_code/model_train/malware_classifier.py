import numpy as np
from scipy import sparse
import random

class MalwareSAFEWClient:
    def __init__(self, data, weights, malicious, id_):
        self.data = data
        self.id_ = id_
        self.weights = weights
        self.previous_weights = weights
        self.malicious = malicious
        self.honest_weights = weights  # honest weights of a malicious client
        self.bc_weights = weights  # weights if no poisoning would happen
        self.wc_weights = weights
        self.wc_honest_weights = weights

        self.X_installed = self.data.X_preinstalled
        self.y_installed = self.data.y_preinstalled
        self.N_installed = self.data.N_preinstalled

        if self.malicious and data.X_malicious is not None:
            self.install_malicious_app(data.X_malicious)

        if not data.use_LiM_initialization:
            n_apps_to_install = int(np.round(np.random.normal(35, 5), 0))
            for i in range(n_apps_to_install):
                self.install_app(p_malware=0.1)

    def install_app(self, p_malware):
        """Install one app, malware with probability p_malware."""
        X_new, y_new, N_new = self.data.take_client_app(p_malware=p_malware)
        if N_new not in self.N_installed:
            self.X_installed = sparse.vstack((self.X_installed, X_new))
            self.y_installed = np.append(self.y_installed, y_new)
            self.N_installed = self.N_installed + [N_new]

    def delete_app(self):
        # check if there are still apps deletable
        if self.y_installed.shape[0] > 97 and not self.data.use_LiM_initialization:

            deletable_apps = self.N_installed.copy()
            for pre_inst_app in self.data.N_preinstalled:
                deletable_apps.remove(pre_inst_app)
            if self.malicious and self.data.X_malicious is not None:
                try:
                    deletable_apps.remove(self.data.N_malicious)
                except:
                    self.install_malicious_app(self.data.X_malicious)

            app = random.choice(deletable_apps)
            idx = self.N_installed.index(app)

            if app is not None:
                mask = np.ones_like(self.y_installed, dtype=bool)
                mask[idx] = False
                self.X_installed = self.X_installed[mask, :]
                self.y_installed = self.y_installed[mask]
                self.N_installed.remove(app)

    def install_malicious_app(self, X_malicious):
        self.X_installed = sparse.vstack((self.X_installed, X_malicious))
        self.y_installed = np.append(self.y_installed, self.data.y_malicious)
        self.N_installed = self.N_installed + [self.data.N_malicious]
