from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import namedtuple
from lim_code.lim_logger import logger


def simple_report(df):
    errors = []
    Line = namedtuple("Line",
                      ["error",
                       "place",
                       "classifier",
                       "average",
                       "std",
                       "total"])
    df["precision"] = df.tp/(df.tp+df.fp)
    df["recall"] = df.tp/(df.tp+df.fn)

    for place in ["client", "cloud"]:
        client = df[df.place == place]
        for classifier in df.classifier.unique():
            classifier_df = client[client.classifier == classifier]
            line = Line(error="False positives",
                        place=place,
                        classifier=classifier,
                        # weights=classifier_df.weights,
                        average=classifier_df.groupby(by="federation_round").fp.mean().mean(),
                        std=classifier_df.groupby(by="federation_round").fp.std().mean(),
                        total=classifier_df.fp.mean(),
            )
            errors.append(line)

            with_malware = classifier_df[classifier_df.tp + classifier_df.fn > 0]
            if with_malware.shape[0] > 0:
                line = Line(error="Recall",
                            place=place,
                            classifier=classifier,
                            # weights=classifier_df.weights,
                            average=with_malware.groupby(by="federation_round").recall.mean().mean(),
                            std=with_malware.groupby(by="federation_round").recall.std().mean(),
                            total=(with_malware.tp + with_malware.fp).mean(),)
                errors.append(line)

                line = Line(error="Overall performance (F1 score)",
                            place=place,
                            classifier=classifier,
                            # weights=classifier_df.weights,
                            average=with_malware.groupby(by="federation_round").f1.mean().mean(),
                            std=with_malware.groupby(by="federation_round").f1.std().mean(),
                            total=(with_malware.tp + with_malware.fn + with_malware.fp + with_malware.tn).mean(),)
                errors.append(line)

    poisoned_per_round, wc_poisoned_per_round, bc_poisoned_per_round = count_poisoned_honest_clients(df)
    additional_info = "\n======BEST CASE======="
    additional_info += "\navg poisoned honest clients per round = {}".format(np.mean(bc_poisoned_per_round))
    additional_info += "\nmax poisoned honest clients in a round = {}".format(np.max(bc_poisoned_per_round))
    additional_info += "\n======WORST CASE======="
    additional_info += "\navg poisoned honest clients per round = {}".format(np.mean(wc_poisoned_per_round))
    additional_info += "\nmax poisoned honest clients in a round = {}".format(np.max(wc_poisoned_per_round))
    additional_info += "\n=========LiM==========="
    additional_info += "\navg poisoned honest clients per round = {}".format(np.mean(poisoned_per_round))
    additional_info += "\nmax poisoned honest clients in a round = {}".format(np.max(poisoned_per_round))

    report = pd.DataFrame(data=errors)
    for error in report.error.unique():
        logger.info(f"{error}\n{report[report.error == error]}")

    return report.to_string() + additional_info


def count_poisoned_honest_clients(df):
    # counts the poisoned honest clients per round
    poisoned_per_round = np.zeros(df.federation_round.max()+1)
    wc_poisoned_per_round = np.zeros(df.federation_round.max()+1)
    bc_poisoned_per_round = np.zeros(df.federation_round.max() + 1)
    for index, row in df.iterrows():
        if not row['malicious'] and row['place'] == 'client' and row['classifier'] == 'lim':
            if row['poisoned']:
                poisoned_per_round[row['federation_round']] += 1
            if row['wc_poisoned']:
                wc_poisoned_per_round[row['federation_round']] += 1
            if row['bc_poisoned']:
                bc_poisoned_per_round[row['federation_round']] += 1
    return poisoned_per_round, wc_poisoned_per_round, bc_poisoned_per_round


def plot_place(df, place, metrics=["recall", "precision", "fp", "f1"]):
    df["precision"] = df.tp/(df.tp+df.fp)
    df["recall"] = df.tp/(df.tp+df.fn)

    df = df[df.place == place]
    by = df.groupby(by=["federation_round", "classifier"]).mean().unstack()

    with_malware = df[df.tp + df.fn > 0]
    if with_malware.shape[0] > 0:
        for metric in metrics:
            by = with_malware.groupby(by=["federation_round", "classifier"]).mean().unstack()
            if metric in by:
                results_metric = by[metric]
                if 'poisoned' in results_metric.columns:
                    styles = ['bs-', 'ro-', 'y^-', 'k+-', 'g+-']
                    results_metric = results_metric.reindex(columns=['baseline', 'no-lim', 'lim', 'wc-lim', 'bc-lim'])
                else:
                    styles = ['bs-', 'ro-', 'y^-']
                    results_metric = results_metric.reindex(columns=['baseline', 'no-lim', 'lim'])
                style = styles[:df.classifier.unique().shape[0]]
                results_metric = results_metric.rename(columns={"no-lim": "SAFEW", "lim": "LiM", "bc-lim": "LiM (best case)", "wc-lim": "LiM (worst case)"})

                ylim = None if metric == "fp" else [-0.1, 1.1]
                results_metric.plot(
                    ylim=ylim,
                    style=style,
                    ylabel=metric
                )

                f = Path(f"{place}_{metric}.png")
                plt.savefig(str(f))
                plt.close()


def plot_poisoned_clients(df):
    poisoned_per_round, wc_poisoned_per_round, bc_poisoned_per_round = count_poisoned_honest_clients(df)

    data = {
        "LiM" : poisoned_per_round,
        "LiM (worst case)": wc_poisoned_per_round,
        "LiM (best case)": bc_poisoned_per_round,
    }
    df = pd.DataFrame(data=data)
    df.plot(
        style=['y^-', 'k+-', 'g+-'],
        xlabel="federation_round",
        ylabel="Number of poisoned honest clients",
    )
    f = Path("client_poisoned.png")
    plt.savefig(str(f))
    plt.close()


def plot_cloud(df):
    plot_place(df, "cloud")


def plot_clients(df):
    plot_place(df, "client")
    plot_poisoned_clients(df)
